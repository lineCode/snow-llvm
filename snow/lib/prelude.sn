module: [block] {
	m: Object()
	m.instance_eval(block)
	m
}

Class.define_method(#<<) [module] {
	module.each_pair [name, functor] {
		.define_method(name, functor)
	}
	self
}

@: Array
#: Map


Enumerable: #(
	all?: [condition] {
		condition: condition or { it }
		fiber: Fiber [yield] {
			.each { yield(false) unless condition(it) }
			true
		}
		fiber()
	},
	
	any?: [condition] {
		condition: condition or { it }
		fiber: Fiber [yield] {
			.each { yield(true) if condition(it) }
			false
		}
		fiber()
	},
	
	count: [condition] {
		i: 0
		condition: condition or { it }
		.each { i: i + 1 if condition(it) }
		return i
	},
	
	find: [condition_or_object] {
		-- TODO: is_a?() required to implement this
	},
	
	map: [block] {
		MapEnumerator(self, block)
	},
	
	select: [block] {
		SelectEnumerator(self, block)
	},
	
	reject: [block] {
		SelectEnumerator(self, { !block(it) })
	},
	
	inject: [base, block] {
		carry: base
		.each { carry: block(carry, it) }
		carry
	},
)

Array << Enumerable
Map << Enumerable 
Fiber << Enumerable

MapEnumerator: Class() << Enumerable << #(
	initialize: [collection, function] {
		$collection, $function: collection, function
	},
	
	each: [block] {
		$collection.each {
			block($function(it))
		}
	},
	
	to_array: {
		array: @()
		.each { array << it }
		array
	},
	
	to_map: {
		map: Map()
		$collection.each {
			map[it]: $function(it)
		}
		map
	},
	
	to_string: {
		return .to_array().to_string() if $collection
		"[MapEnumerator prototype]"
	},
	
	inspect: {
		if $collection
			return .to_array().inspect()
		else
			return "[MapEnumerator]"
		end
	},
)

SelectEnumerator: Class() << Enumerable << #(
	initialize: [collection, function] {
		$collection, $function: collection, function
	},
	
	each: [block] {
		$collection.each {
			block(it) if $function(it)
		}
	},
	
	to_array: {
		array: @()
		.each { array << it }
		array
	},
	
	to_string: {
		return .to_array().to_string() if $collection
		"[SelectEnumerator prototype]"
	},
	
	inspect: {
		if $collection
			return .to_array().inspect()
		else
			return "[SelectEnumerator]"
		end
	},
)
